<section id="hero" class="hero hero1 section forcast">
  <div class="container-fluid">
    <%# render partial: 'shared/upgrade_plan_msg' #%>
    <!-- Elementos fixos -->
    <div class="fixed-elements">
      <%= render partial: 'form_buttons' %>
      <%= render partial: 'filters' %>
      <%= render partial: 'color_filters' %>
      <%= render partial: 'total' %>
    </div>
    <div class="scrollable-content">
      <%= render partial: 'chart' %>
      <input type="number" id="chart-point-editor" style="display:none; position:absolute; z-index:1000; width:80px;" />

    <%= render partial: "forecast_rows/modify_table_frame", locals: {
    modify_table_forecast_rows: @modify_table_forecast_rows,
    modify_forecast_rows_header: @modify_forecast_rows_header
    } %>

    <%= render partial: "forecast_rows/backup_table_frame", locals: {
    forecast_rows_backup: @forecast_rows_backup,
    forecast_rows_backup_header: @forecast_rows_backup_header
    } %>

    <%= render partial: "forecast_rows/difference_table_frame", locals: {
    comparison_data: @comparison_data,
    all_keys: @all_keys
    } %>

    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-dragdata"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/xlsx@0.17.0/dist/xlsx.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script>
alert("Script carregado");

    function applyUpdates() {
        const form = document.getElementById("filter-form");
        if (form) form.submit();
    }
        let chartRendered = false;

  console.log("Rodando renderChartOnce"); // ðŸ‘ˆ ADICIONA ISSO

  function renderChartOnce() {
  if (chartRendered) return;
  chartRendered = true;

  alert("Script carregado");
  console.log("Rodando renderChartOnce");

  const ctx = document.getElementById('forecast-chart').getContext('2d');
  if (!ctx) return;

  if (window.forecastChart instanceof Chart) {
    window.forecastChart.destroy();
  }

  let actuals = [];
  let isDarkMode = false;
  let originalValue = null;

  const sumOfAverages1 = <%= @average1 ? @average1 : '[]' %>;
  const sumOfAverages2 = <%= @average2 ? @average2 : '[]' %>;
  const rawData = <%= raw(@forecast_rows.to_json) %>;
  const labels = Object.keys(rawData[0].data);
  const values = labels.map(key => parseFloat(rawData[0].data[key]));

  const actualsrawData = <%= @actuals.present? ? raw(@actuals.to_json) : '[]' %>;
  if (actualsrawData.length > 0) {
    const actual_labels = Object.keys(actualsrawData[0].data);
    actuals = actual_labels.map(key => parseFloat(actualsrawData[0].data[key]));
  } else {
    actuals = [];
  }

  const rowId = rawData[0].id;
  const greenPeriods = <%= @green %>;
  const bluePeriods = <%= @blue %>;
  const redPeriods = <%= @red %>;
  const total = greenPeriods + bluePeriods + redPeriods;
  const colors = [
    ...Array(greenPeriods).fill('rgba(102, 205, 170, 0.8)'),
    ...Array(bluePeriods).fill('rgba(100, 149, 237, 0.8)'),
    ...Array(redPeriods).fill('rgba(240, 128, 128, 0.8)')
  ];

    const min_value = <%= @min_value %>;
    const max_value = <%= @max_value %>;


  window.forecastChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Forecast',
          data: <%= @totals_by_column.to_h.values %>,
          borderColor: colors,
          segment: {
            borderColor: ctx => colors[ctx.p1DataIndex]
          },
          borderWidth: 2,
          fill: false,
          pointBackgroundColor: 'white',
          pointBorderColor: colors,
          pointRadius: 5,
          tension: 0.4
        },
        {
          label: 'Backup Forecast',
          data: <%= @totals_backup_by_column.to_h.values %>,
          borderColor: 'gray',
          borderWidth: 2,
          borderDash: [5, 5],
          fill: false,
          pointRadius: 5,
          tension: 0.4,
          datalabels: { display: false }
        },
        {
          type: 'bar',
          label: 'Actuals',
          data: <%= @actual_columns.to_h.values %>,
          backgroundColor: 'rgba(173, 216, 230, 0.7)',
          datalabels: { display: false }
        },
        {
          label: 'Avg-1',
          data: Array(labels.length).fill(sumOfAverages1),
          borderColor: 'rgba(100, 149, 237, 0.8)',
          borderWidth: 2,
          borderDash: [3, 3],
          pointRadius: 0,
          fill: false,
          datalabels: { display: false }
        },
        {
          label: 'Avg-2',
          data: Array(labels.length).fill(sumOfAverages2),
          borderColor: 'rgba(255, 99, 132, 0.8)',
          borderWidth: 2,
          borderDash: [3, 3],
          pointRadius: 0,
          fill: false,
          datalabels: { display: false }
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      layout: { padding: { top: 50, bottom: 30 } },
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            boxWidth: 15,
            font: { size: 12 },
            color: isDarkMode ? "#ffffff" : "#000000"
          }
        },
        tooltip: {
          backgroundColor: isDarkMode ? "#333" : "#ffffff",
          titleColor: isDarkMode ? "#ffffff" : "#000000",
          bodyColor: isDarkMode ? "#ffffff" : "#000000",
          borderColor: isDarkMode ? "#666" : "#ddd",
          borderWidth: 1
        },
        datalabels: {
          color: isDarkMode ? "#ffffff" : "#000000",
          anchor: 'end',
          align: 'top',
          formatter: value => Math.round(value).toLocaleString(),
          font: { size: 9, weight: 'bold' },
          rotation: -60
        },
        dragData: {
          round: 1,
          showTooltip: true,
          onDragStart: (e, datasetIndex, index, value) => {
            if (datasetIndex !== 0) return false;
            originalValue = value;
            return true;
          },
          onDragEnd: (e, datasetIndex, index, value) => {
            if (datasetIndex !== 0 || originalValue === null) return;
            const percentChange = ((value - originalValue) / originalValue) * 100;
            const key = labels[index];
            rawData[0].data[key] = value;

            fetch(`/forecast_rows/${rowId}`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
              },
              body: JSON.stringify({
                data: rawData[0].data,
                changed_key: key,
                which_type: which_type,
                select_type: select_type,
                percent_change: percentChange.toFixed(2)
              })
            }).then(response => {
              if (!response.ok) alert("Failed to save updated value.");
            });
          }
        }
      },
      scales: {
        x: {
          title: { display: false },
          ticks: {
            maxRotation: 60,
            minRotation: 30,
            color: isDarkMode ? "#ffffff" : "#000000"
          },
          grid: { display: false, color: isDarkMode ? "#444" : "#ddd" }
        },
        y: {
          title: { display: false },
          beginAtZero: true,
          min: min_value,
          suggestedMax: max_value,
          ticks: {
            callback: value => Math.round(value).toLocaleString(),
            color: isDarkMode ? "#ffffff" : "#000000"
          },
          grid: { display: false, color: isDarkMode ? "#444" : "#ddd" }
        }
      }
    },
    plugins: [ChartDataLabels]
  });

  const inputField = document.getElementById("chart-point-editor");

  document.getElementById("forecast-chart").onclick = function (event) {
    const canvasPosition = Chart.helpers.getRelativePosition(event, window.forecastChart);
    const points = window.forecastChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);
    if (points.length > 0) {
      const pointIndex = points[0].index;
      const datasetIndex = points[0].datasetIndex;
      const meta = window.forecastChart.getDatasetMeta(datasetIndex);
      const point = meta.data[pointIndex];
      inputField.value = point.$context.raw;
      inputField.dataset.index = pointIndex;
      inputField.style.left = `${event.pageX}px`;
      inputField.style.top = `${event.pageY}px`;
      inputField.style.width = "80px";
      inputField.style.zIndex = "1000";
      inputField.style.display = 'block';
      document.body.appendChild(inputField);
      inputField.focus();
    } else {
      inputField.style.display = 'none';
    }
  };

  function handleInputSave() {
    const newValue = parseFloat(inputField.value);
    if (!isNaN(newValue)) {
      const index = parseInt(inputField.dataset.index);
      const key = labels[index];
      const oldValue = parseFloat(rawData[0].data[key]);
      const percentChange = ((newValue - oldValue) / oldValue) * 100;

      window.forecastChart.data.datasets[0].data[index] = newValue;
      rawData[0].data[key] = newValue;
      window.forecastChart.update();

      fetch(`/forecast_rows/${rowId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify({
          data: rawData[0].data,
          changed_key: key,
          percent_change: percentChange.toFixed(2)
        })
      }).then(response => {
        if (!response.ok) alert("Failed to save updated value.");
      });
    }
    inputField.style.display = 'none';
  }

  inputField.onblur = handleInputSave;

  inputField.addEventListener("keydown", function (e) {
    if (e.key === "Enter") {
      e.preventDefault();
      handleInputSave();
    }
  });

  const delayedAvg1Submit = debounce(() => {
    const form = document.getElementById("filter-form");
    if (form) form.submit();
  }, 800);
  document.querySelectorAll('input[name="avg1_selected_dates[]"]').forEach(box => {
    box.addEventListener('change', delayedAvg1Submit);
  });

  const delayedAvg2Submit = debounce(() => {
    const form = document.getElementById("filter-form");
    if (form) form.submit();
  }, 800);
  document.querySelectorAll('input[name="avg2_selected_dates[]"]').forEach(box => {
    box.addEventListener('change', delayedAvg2Submit);
  });
}



document.addEventListener("DOMContentLoaded", renderChartOnce);

</script>
<div class="loading-popup" style="display: none;">
  <p>Processing data... Please wait.</p>
</div>
<div class="hidden-content">
  <div id="tooltip" class="custom-tooltip" style="display: none;"></div>
</div>