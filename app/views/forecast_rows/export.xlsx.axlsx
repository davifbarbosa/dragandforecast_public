def is_numeric?(value)
  true if Float(value) rescue false
end

wb = xlsx_package.workbook

# Helper method for column ordering
def ordered_keys_from(data_hashes)
  keys = data_hashes.flat_map(&:keys).uniq
  priority_keys = ["Product", "Category", "Sub-Category"]
  month_keys = keys - priority_keys
  priority_keys + month_keys.sort
end

# Sheet 1: Forecast Data
wb.add_worksheet(name: "Forecast") do |sheet|
  forecast_data = @forecast_rows.map(&:data)
  keys = ordered_keys_from(forecast_data)
  sheet.add_row keys

  @forecast_rows.each do |row|
    sheet.add_row keys.map { |k| row.data[k] }
  end
end

# Sheet 2: Backup Data
wb.add_worksheet(name: "Backup") do |sheet|
  backup_data = @backup_table.map(&:data)
  keys = ordered_keys_from(backup_data)
  sheet.add_row keys

  @backup_table.each do |row|
    sheet.add_row keys.map { |k| row.data[k] }
  end
end

# Sheet 3: Comparison Data
wb.add_worksheet(name: "Comparison") do |sheet|
  priority_keys = ["Product", "Category", "Sub-Category"]
  all_data = @forecast_rows.map { |r| r.data.merge(r.forecast_row_backup&.data || {}) }
  keys = ordered_keys_from(all_data)
  sheet.add_row keys

  @forecast_rows.each do |row|
    backup = row.forecast_row_backup
    next unless backup

    current_data = row.data
    backup_data = backup.data

    values = keys.map do |key|
      original = backup_data[key]
      updated = current_data[key]

      if priority_keys.include?(key)
        original.to_s
      else
        if original.to_s == updated.to_s
          0
        elsif is_numeric?(original) && is_numeric?(updated)
          diff = (updated.to_f - original.to_f).round(2)
          diff.zero? ? 0 : diff
        else
          "changed"
        end
      end
    end

    sheet.add_row values
  end
end
